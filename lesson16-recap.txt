Strings can do a lot of the same things lists can do, but strings are immutable. list("Hello") will give you a list with all the letters of Hello. You can use a bunch of things with strings like example below
>>> list("Hello")
['H', 'e', 'l', 'l', 'o']
>>> name="Zophie"
>>> name[0]
'Z'
>>> name[1:3]
'op'
>>> "Zo" in name
True
>>> "xxx" in name
False
>>> for letter in name:
...     print(letter)
... 
Z
o
p
h
i
e
>>> 

Immutable values like strings and tuples cannot be modified "in place". You cannot assign things in strings like you can in lists. Proper way to modify string is to create new string, example:

>>> name="Zophie the cat"
>>> newName=name[0:7] + "a" + name[8:12]
>>> print(newName)
Zophie ahe c

Mutable values like lists can be modified in place.
Variables don't contain lists, they contain references to lists, example:

>>> spam=[0,1,2,3,4,5]
>>> cheese=spam
>>> cheese[1]="hello"
>>> cheese
[0, 'hello', 2, 3, 4, 5]
>>> spam
[0, 'hello', 2, 3, 4, 5]

>>> spam="Hello"
>>> cheese=spam
>>> spam="Hi"
>>> spam
'Hi'
>>> cheese
'Hello'

See the difference???

When passing a list argument to a function, you are actually passing a list reference.
Changes made to a list in a function will affect the list outside the function.

In order to actually copy a whole list to a new variable, you can use the deepcopy fucntion of the copy module, this will not change the original list, example:
>>> import copy
>>> spam=["A","B","C","D"]
>>> cheese = copy.deepcopy(spam)
>>> cheese
['A', 'B', 'C', 'D']
>>> cheese[1]=42
>>> cheese
['A', 42, 'C', 'D']
>>> spam
['A', 'B', 'C', 'D']

The \ line continuation character can be used to stretch Python instruction across multiple lines. Example: print('Four score and seven' + \
    "years") will be treated as one line
Lists can continue on the next line and python will ignore the indentation, example:
spam=['apples',
        'oranges',
        'bananas']
this will all be treated as one line.

