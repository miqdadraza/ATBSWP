^ means the string must start with pattern, $ means the string must end with the pattern. Both means the entire string must match the entire pattern.
The . dot is a wildcard; it matches any character except newlines. .* means any pattern at all.
Pass re.DOTALL as the second argument to re.compile() to make the . dot match newlines as well.
Pass re.I as the second argument to re.compile() to make the matching case-insensitive.


Examples:

>>> import re
>>> beginsWithHelloRegex = re.compile(r'^Hello')
>>> beginsWithHelloRegex.search('Hello there!')
<re.Match object; span=(0, 5), match='Hello'>
>>> beginsWithHelloRegex.search('He said Hello there!') == None
True #because this is not at the beginning of the string
>>> endsWithWorldRegex = re.compile(r'world!$')
>>> endsWithWorldRegex.search('Hello world!')
<re.Match object; span=(6, 12), match='world!'>
>>> endsWithWorldRegex.search('Hello world!').span()
(6, 12)
>>> allDigitsRegex = re.compile(r'^\d+$')
>>> allDigitsRegex.search('2222232243434')
<re.Match object; span=(0, 13), match='2222232243434'> #begins and ends entire string
>>> allDigitsRegex.search('22222322x43434')
>>> allDigitsRegex.search('22222322x43434') == None
True #this is because the entire string is not
>>> 
>>> 
>>> 
>>> 
>>> atRegex = re.compile(r'.at')
>>> atRegex.findall('The cat in the hat sat on the flat mat')
['cat', 'hat', 'sat', 'lat', 'mat'] #. is wildcard, will match anything+at (except newline)
>>> 
>>> 
>>> 
>>> atRegex = re.compile(r'.{1,2}at')
>>> atRegex.findall('The cat in the hat sat on the flat mat')
[' cat', ' hat', ' sat', 'flat', ' mat'] #{1.2} from prev lesson, can match 1 or 2
>>> 
>>> 
>>> 
>>> 'First Name: Al Last Name: Sweigart'
'First Name: Al Last Name: Sweigart'
>>> 'First Name: Al Last Name: Sweigart'.find(':') #long way
10
>>> 'First Name: Al Last Name: Sweigart'.find(':') + 2
12
>>> 'First Name: Al Last Name: Sweigart'.[12:]
  File "<input>", line 1
    'First Name: Al Last Name: Sweigart'.[12:]
                                         ^
SyntaxError: invalid syntax
>>> 'First Name: Al Last Name: Sweigart'[12:]
'Al Last Name: Sweigart'
>>> 
#short way: (.*). 
>>> nameRegex = re.compile(r'First Name: (.*) Last Name: (.*)') #basically its saying look for everything after first name until where the L of last name starts
>>> nameRegex.findall('First Name: Al Last Name: Sweigart')
[('Al', 'Sweigart')]


>>> serve='<To serve humans> for dinner.>'
>>> nongreedy = re.compile(r'<(.*?)>')
>>> nongreedy.findall(serve)
['To serve humans']
>>> 
>>> 
>>> 
>>> greedy = re.compile(r'<(.*)>')
>>> greedy.findall(serve)
['To serve humans> for dinner.']
>>> 
>>> 
>>> 
>>> prime = 'Serve the public trust.\nProtect the innocent.\nUphold the l
aw.'
>>> print(prime)
Serve the public trust.
Protect the innocent.
Uphold the law.
>>> dotStar = re.compile(r'.*')
>>> dotStar.search(prime)
<re.Match object; span=(0, 23), match='Serve the public trust.'> #only matches until new line)
>>> 
>>> 
>>> dotStar = re.compile(r'.*',re.DOTALL) #matches new line also
>>> dotStar.search(prime)
<re.Match object; span=(0, 61), match='Serve the public trust.\nProtect t
he innocent.\nU>
>>> 
>>> 
>>> 
>>> 
>>> vowelRegex = re.compile(r'[aeiou]')
>>> vowelRegex.findall('Al, why does your programming book talk about Rob
ocop so much?')
['o', 'e', 'o', 'u', 'o', 'a', 'i', 'o', 'o', 'a', 'a', 'o', 'u', 'o', 'o
', 'o', 'o', 'u']
>>> vowelRegex = re.compile(r'[aeiou]', re.I) $ignores case)
>>> vowelRegex.findall('Al, why does your programming book talk about Rob
ocop so much?')
['A', 'o', 'e', 'o', 'u', 'o', 'a', 'i', 'o', 'o', 'a', 'a', 'o', 'u', 'o
', 'o', 'o', 'o', 'u']
